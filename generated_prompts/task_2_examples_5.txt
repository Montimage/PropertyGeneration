
You are an AI that generates XML properties for deep packet inspection.

### MMT Property Context:
XML Rules:
- A <property> defines a security rule (SECURITY_RULE) or an attack rule (ATTACK).
- Each property begins with a <property> tag and ends with </property>
- A property is a "general ordered tree"
- The nodes of the property tree are:
  - <property> node (required)
  - <operator> nodes (optional)
  - <event> nodes (required)
- The <property> node is forcibly the root node and the <event> nodes are forcibly leaf nodes.
- The left branch represents the context and the right branch represents the trigger.
- The property is found valid when the trigger is found valid; and the trigger is checked only if the context is valid.

- <beginning> tag:
  - Container tag for defining multiple properties
  - Holds one or more <property> definitions
  - Includes optional embedded functions.

- A <property> tag contains:
  - value (optional): THEN, defines the logical relationship between context and the trigger
  - delay_min (optional), attribute sets a time constraint on when the trigger must occur relative to the context. A negative delay (-1) means the trigger must have occurred before the context. A zero delay (0) means the trigger must occur simultaneously with the context. A positive delay (+N) means the trigger must occur after the context.
  - property_id (required): attribute uniquely identifies the property.
  - description (required): Textual description of the property.
  - if_satisfied, (optional) specifies an action to be executed when the property condition is met, through the reactive function.
  - type_property (required) can be SECURITY_RULE, ATTACK, EVASION, or TEST

- An <event> tag contains:
  - value:COMPUTE, indicates that this event is evaluated based on a boolean expression.
  - event_id, assigns a unique identifier to the event, allowing it to be referenced within the security property.
  - description: Textual description of the event.
  - boolean_expression, attribute that defines the conditions that determines when the event is triggered. Packet or message attributes are identified by <protocol_name>”.”<field_name>[“.”<event_id>]. Protocol_name is either BASE (containing packet metadata, e.g., protocol id, time slot of message) or the message/protocol identifier (e.g., SPHY_DATA_REQ, IP, TCP, UDP...). Field_name is the name of the attribute. Event_id allows identifying data captured when another event (identified using its id) of the property occurred. Expressions can use packet fields, protocol attributes, or embedded functions.

- <embedded_functions> tag:
  - Contains custom embedded logic (C functions) that can be used within the boolean_expression in <event> tags.
  - One can either use existing embedded functions or implement a new function.
  - They can be used in the boolean_expression by using the syntax #<name_of_function>(<list of parameters>)
  - To avoid any confusion, a new embedded function name should start by a prefix em_
  - Inside the tag, one can also implement 2 other functions as the followings:
    - void on_load(){ ... } being called when the rules inside the xml file being loaded into MMT-Security
    - void on_unload(){ ... } being called when exiting MMT-Security
  - Note that, before using a C function the library containing that embedded functions need to be included. The following libraries have been pre-included:
    -#include <string.h>
    -#include <stdio.h>
    -#include <stdlib.h>
    -#include "mmt_lib.h"
    -#include "pre_embedded_functions.h"

- Reactive functions
  - They allow user perform some action when a rule is satisfied. The functions will be called each time rules are satisfied.
  - To implement and use a reactive function, one need to implement a C function inside <embedded_functions> tag, the function name should be prefixed by em_ to avoid confusion with the ones existing in MMT.
  - The function has the following format:
typedef void (*mmt_rule_satisfied_callback)(
		const rule_t *rule,		          //rule being validated
		int verdict,                     //DETECTED, NOT_RESPECTED
		uint64_t timestamp,              //moment (by time) the rule is validated
		uint64_t counter,                //moment (by order of message) the rule is validated
		const mmt_array_t * const trace  //historic of messages that validates the rule
);

- In the XML file of a rule, if an attribute is absent then its value is set by default
  - property, operator:
    - value: COMPUTE (=> only one <event> is required. Thus delay_min and delay_max must be 0)
    - delay_units: 0
    - delay_max: 0

## Scenario Description:
The system under test consists of an electric vehicle charging station (evcs) that communicates
with a central station management system (csms) using the open charge point protocol (ocpp).
This property ensures that the charging station maintains continuous communication with the csms through
periodic Heartbeat messages. The generated XML should define expected message exchanges, time constraints, and error recovery
mechanisms for ensuring compliance with ocpp-based communication, and message structure.

Protocol: Open Charge Point Protocol (ocpp) 1.6
Property: The charging point must send periodic Heartbeat messages to the CSMS to ensure continuous communication.
Trigger: A Heartbeat message is sent by the charging station every 60 seconds as per OCPP specifications.
Response:
- The CSMS must respond within 5 seconds of receiving a Heartbeat, confirming system connectivity.
Error Handling:
- If the CSMS does not respond to 3 consecutive Heartbeat messages, the charging station must trigger an alert event signaling a potential communication breakdown.
- The alert must be logged and reported to the network monitoring system for further investigation.

## Protocol Context:
Protocol: ocpp
Attributes: ['message', 'type', 'id', 'action', 'payload']

## Example XML Properties:
### Example 1:
**Description:** 5G UE authentication hijack: UE IDs in Authentication Response is different with the one of Authentication Request
**Protocol(s):** ngap, nas_5g, sctp_data
**XML Property:**
<beginning>

<property value="THEN" delay_units="s" delay_min="0" delay_max="1" property_id="91" type_property="ATTACK" 
    description="5G UE authentication hijack: UE IDs in Authentication Response is different with the one of Authetication Request">
    <event value="COMPUTE" event_id="1" 
        description="Authentication request, Downlink NAS Transport"
           boolean_expression="((ngap.procedure_code == 4) &amp;&amp;  (nas_5g.message_type == 86))"/>
    
    <event value="COMPUTE" event_id="2" 
        description="In Authentication Response of the same SCTP stream, same AMF-UE-ID but different RAN-UE-ID"
           boolean_expression="((sctp_data.data_stream == sctp_data.data_stream.1) 
           &amp;&amp; ((((ngap.procedure_code == 46) 
           &amp;&amp;  (((nas_5g.message_type == 87) 
           &amp;&amp;  ((ngap.amf_ue_id == ngap.amf_ue_id.1)
           &amp;&amp;   (ngap.ran_ue_id != ngap.ran_ue_id.1) )))))))"/>
    
</property>

</beginning>


### Example 2:
**Description:** One ARP request receives two replies with different MAC addresses
**Protocol(s):** arp, ethernet
**XML Property:**
<beginning>
<!-- These properties analyse ARP messages using the following packet fields:
        ar_op  : ARP OPCODE field that identifies if it is a REQUEST (value 1) or a REPLY (value 2)
        ar_sip : Sender IP address (IP address of the device sending the ARP message)
        ar_tip : Target IP address (IP address of the target device)
        ar_sha : Sender MAC address (MAC address of the sender device)

     Note that these properties detect possible attacks. There are cases where they are not, such as when one needs to:
        change a device and reuse the same IP address,
        change the MAC address of a device.
-->
<!-- Property 4: One ARP request receives two replies with different MAC addresses.
-->
<property value="THEN" delay_units="s" delay_min="0+" delay_max="4" property_id="4" type_property="ATTACK" 
          description="IPv4 address conflict detection (RFC5227). Possible arp poisoning.">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="4">
      <event value="COMPUTE" event_id="1" 
             description="An arp who was requested"
             boolean_expression="((arp.ar_op == 1) &amp;&amp; (ethernet.src != ethernet.dst))"/>
      <event value="COMPUTE" event_id="2" 
             description="An arp reply with MAC address"
             boolean_expression="(((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.1)) &amp;&amp; (ethernet.packet_count &gt; 1))"/>
    </operator>
    <event value="COMPUTE" event_id="3" 
           description="An arp reply but with different MAC address"
           boolean_expression="((((arp.ar_op == 2)&amp;&amp;(arp.ar_sip == arp.ar_tip.1))&amp;&amp;(arp.ar_sha != arp.ar_sha.2)) &amp;&amp; (ethernet.packet_count != 0))"/>
</property>
</beginning>


### Example 3:
**Description:** TCP with all flags FIN, URG, PSH active.
**Protocol(s):** tcp, ip
**XML Property:**
<beginning>
<!-- Property 28: XMAS s00can : TCP with all flags FIN, URG, PSH active.-->
    <property value="THEN" delay_units="s" delay_min="0" delay_max="0" property_id="28" type_property="ATTACK"
         description="XMAS scan : TCP with all flags FIN, URG, PSH active.">
    <event value="COMPUTE" event_id="1"
         description="TCP packet with flag FIN active"
         boolean_expression="((tcp.urg == 1)&amp;&amp;(ip.src != ip.dst))"/>
    <event value="COMPUTE" event_id="2"
         description="TCP packet with flags URG and PSH active"
         boolean_expression="((tcp.fin == 1)&amp;&amp;(tcp.psh == 1))"/>
    </property>
</beginning>


### Example 4:
**Description:** Probable FTP bounce scan.
**Protocol(s):** ftp, ip
**XML Property:**
<beginning>
<!-- Property 48: Probable FTP bounce scan.
-->
	<property value="THEN" delay_units="s" delay_min="0+" delay_max="5" property_id="48" type_property="ATTACK" 
    description="Probable FTP bounce scan (4 different requests in a row for different ports).">
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
      <event value="COMPUTE" event_id="1" 
             description="FTP request PORT(1)"
             boolean_expression="(#strstr(ftp.packet_request, 'PORT') != 0)"/>
      <event value="COMPUTE" event_id="2" 
             description="FTP request PORT(2)"
             boolean_expression="((#strstr(ftp.packet_request, 'PORT') != 0)&amp;&amp;((ftp.packet_request_parameter != ftp.packet_request_parameter.1)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="s" delay_min="0+" delay_max="3">
      <event value="COMPUTE" event_id="3" 
             description="FTP request PORT(3)"
             boolean_expression="((#strstr(ftp.packet_request, 'PORT') != 0)&amp;&amp;((ftp.packet_request_parameter != ftp.packet_request_parameter.1)&amp;&amp;((ftp.packet_request_parameter != ftp.packet_request_parameter.2)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
      <event value="COMPUTE" event_id="4"
             description="FTP request PORT(4)"
             boolean_expression="((#strstr(ftp.packet_request, 'PORT') != 0)&amp;&amp;((ftp.packet_request_parameter != ftp.packet_request_parameter.1)&amp;&amp;((ftp.packet_request_parameter != ftp.packet_request_parameter.2)&amp;&amp;((ftp.packet_request_parameter != ftp.packet_request_parameter.3)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
    </operator>
</property>
</beginning>


### Example 5:
**Description:** This rule aims to detect 'IP fragment overrun' attack.
**Protocol(s):** ip
**XML Property:**
<beginning>
<!-- Property 53: This rule aims to detect "IP fragment overrun" attack. Ref: https://en.wikipedia.org/wiki/IP_fragmentation_attack
The maximum packet length of an IPv4 packet is 65 535 bytes (2^16 - 1)
The IP Fragment Overrun exploit is when a reassembled fragmented datagram exceeds the declared IP data length or the maximum datagram length. By definition, no IP datagram should be larger than 65,535 bytes. Systems that try to process these large datagrams can crash, and can be indicative of a denial of service attempt.
-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="53" type_property="EVASION" 
          description="IP fragment overrun">
      <event value="COMPUTE" event_id="1" 
             description="A defragmented packet"
             boolean_expression="((ip.df_flag + ip.mf_flag) ==0)"/>
      <event value="COMPUTE" event_id="2" 
             description="Packet length greater than 65 535"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;(meta.packet_len &gt; 65535))"/>
  </property>
</beginning>


### Task:
Generate a new XML property that matches the scenario and adheres to the protocol(s) context.

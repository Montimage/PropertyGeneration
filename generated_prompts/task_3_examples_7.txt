
You are an AI that generates XML properties for deep packet inspection.

### MMT Property Context:
XML Rules:
- A <property> defines a security rule (SECURITY_RULE) or an attack rule (ATTACK).
- Each property begins with a <property> tag and ends with </property>
- A property is a "general ordered tree"
- The nodes of the property tree are:
  - <property> node (required)
  - <operator> nodes (optional)
  - <event> nodes (required)
- The <property> node is forcibly the root node and the <event> nodes are forcibly leaf nodes.
- The left branch represents the context and the right branch represents the trigger.
- The property is found valid when the trigger is found valid; and the trigger is checked only if the context is valid.

- <beginning> tag:
  - Container tag for defining multiple properties
  - Holds one or more <property> definitions
  - Includes optional embedded functions.

- A <property> tag contains:
  - value (optional): THEN, defines the logical relationship between context and the trigger
  - delay_min (optional), attribute sets a time constraint on when the trigger must occur relative to the context. A negative delay (-1) means the trigger must have occurred before the context. A zero delay (0) means the trigger must occur simultaneously with the context. A positive delay (+N) means the trigger must occur after the context.
  - property_id (required): attribute uniquely identifies the property.
  - description (required): Textual description of the property.
  - if_satisfied, (optional) specifies an action to be executed when the property condition is met, through the reactive function.
  - type_property (required) can be SECURITY_RULE, ATTACK, EVASION, or TEST

- An <event> tag contains:
  - value:COMPUTE, indicates that this event is evaluated based on a boolean expression.
  - event_id, assigns a unique identifier to the event, allowing it to be referenced within the security property.
  - description: Textual description of the event.
  - boolean_expression, attribute that defines the conditions that determines when the event is triggered. Packet or message attributes are identified by <protocol_name>”.”<field_name>[“.”<event_id>]. Protocol_name is either BASE (containing packet metadata, e.g., protocol id, time slot of message) or the message/protocol identifier (e.g., SPHY_DATA_REQ, IP, TCP, UDP...). Field_name is the name of the attribute. Event_id allows identifying data captured when another event (identified using its id) of the property occurred. Expressions can use packet fields, protocol attributes, or embedded functions.

- <embedded_functions> tag:
  - Contains custom embedded logic (C functions) that can be used within the boolean_expression in <event> tags.
  - One can either use existing embedded functions or implement a new function.
  - They can be used in the boolean_expression by using the syntax #<name_of_function>(<list of parameters>)
  - To avoid any confusion, a new embedded function name should start by a prefix em_
  - Inside the tag, one can also implement 2 other functions as the followings:
    - void on_load(){ ... } being called when the rules inside the xml file being loaded into MMT-Security
    - void on_unload(){ ... } being called when exiting MMT-Security
  - Note that, before using a C function the library containing that embedded functions need to be included. The following libraries have been pre-included:
    -#include <string.h>
    -#include <stdio.h>
    -#include <stdlib.h>
    -#include "mmt_lib.h"
    -#include "pre_embedded_functions.h"

- Reactive functions
  - They allow user perform some action when a rule is satisfied. The functions will be called each time rules are satisfied.
  - To implement and use a reactive function, one need to implement a C function inside <embedded_functions> tag, the function name should be prefixed by em_ to avoid confusion with the ones existing in MMT.
  - The function has the following format:
typedef void (*mmt_rule_satisfied_callback)(
		const rule_t *rule,		          //rule being validated
		int verdict,                     //DETECTED, NOT_RESPECTED
		uint64_t timestamp,              //moment (by time) the rule is validated
		uint64_t counter,                //moment (by order of message) the rule is validated
		const mmt_array_t * const trace  //historic of messages that validates the rule
);

- In the XML file of a rule, if an attribute is absent then its value is set by default
  - property, operator:
    - value: COMPUTE (=> only one <event> is required. Thus delay_min and delay_max must be 0)
    - delay_units: 0
    - delay_max: 0

## Scenario Description:
The system under test consists of an electric vehicle charging station (evcs) that communicates
with a central station management system (csms) using the open charge point protocol (ocpp).
This property ensures that the charging station accurately reports real-time charging status updates 
to the CSMS, allowing the system to reflect the current state of charging operations.
The generated XML should define expected message exchanges, time constraints, and error recovery
mechanisms for ensuring compliance with ocpp-based communication, and message structure.

Protocol: Open Charge Point Protocol (ocpp) 1.6
Property: The charging station must report its current charging status (Charging, Paused, Finished) to the CSMS.

Trigger: A StatusNotification message must be sent whenever the charging status changes, including events such as:
- Charging session starts.
- Charging session is paused.
- Charging session is completed due to a full charge or user intervention.

Response:
- The CSMS must log and acknowledge the status update within 3 seconds to confirm receipt.

Error Handling:
- If the status update is not acknowledged, the charging station must retry sending the update within 5 seconds.
- If 3 consecutive retries fail, the system must raise an alert, signaling a communication failure in status reporting.
- The alert must be logged and reported to the network monitoring system for diagnostic purposes.

## Protocol Context:
Protocol: ocpp
Attributes: ['message', 'type', 'id', 'action', 'payload']

## Example XML Properties:
### Example 1:
**Description:** Detect EICAR virus test file within the TCP IPv6 payload
**Protocol(s):** ipv6, tcp
**XML Property:**
<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- MMT_Security Copyright (C) 2014-->
<beginning>
<embedded_functions><![CDATA[
//each function name should be prefixed by em_
/**
* Return:
* - 0: ok
* - 1: invalid
* - 2: NULL
*/
static inline int em_check_eicar_virus(const char *str){
   // X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
   
   const char* c = str;
   while( *c != '\0' ){
      if (*c=='X' && c[1]=='5' && c[2]=='O' && c[3]=='!' && c[4]=='P'){
      	if (strstr(c, "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*") != NULL) return 1;
      	// "\\" represents "\"
      	break;
      	} 
      c ++;
   }
   return 0;
}
]]></embedded_functions>
<!-- Property 72: Detect EICAR virus test file within the TCP IPv6 payload-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="72" type_property="ATTACK" 
     description="Detect EICAR virus test file within the TCP/IPv6 payload" >
   <event event_id="1" value="COMPUTE" 
           description="An IP packet"
           boolean_expression="((ipv6.packet_count != 0) &amp;&amp; (ipv6.src != ipv6.dst))"/>
   <event event_id="2" value="COMPUTE" 
           description="EICAR virus test file in the payload"
           boolean_expression="(#em_check_eicar_virus(tcp.p_payload)==1)"/>
 </property>
</beginning>


### Example 2:
**Description:** This rule aims to detect 'IP fragment overrun' attack.
**Protocol(s):** ip
**XML Property:**
<beginning>
<!-- Property 53: This rule aims to detect "IP fragment overrun" attack. Ref: https://en.wikipedia.org/wiki/IP_fragmentation_attack
The maximum packet length of an IPv4 packet is 65 535 bytes (2^16 - 1)
The IP Fragment Overrun exploit is when a reassembled fragmented datagram exceeds the declared IP data length or the maximum datagram length. By definition, no IP datagram should be larger than 65,535 bytes. Systems that try to process these large datagrams can crash, and can be indicative of a denial of service attempt.
-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="53" type_property="EVASION" 
          description="IP fragment overrun">
      <event value="COMPUTE" event_id="1" 
             description="A defragmented packet"
             boolean_expression="((ip.df_flag + ip.mf_flag) ==0)"/>
      <event value="COMPUTE" event_id="2" 
             description="Packet length greater than 65 535"
             boolean_expression="((ip.src != ip.dst)&amp;&amp;(meta.packet_len &gt; 65535))"/>
  </property>
</beginning>


### Example 3:
**Description:** Non standard IP type of service value
**Protocol(s):** ip
**XML Property:**
<beginning>
<embedded_functions><![CDATA[
//each function name should be prefixed by em_

static inline int em_check_ip_proto_id(int i){
  //printf("IP proto ID:%d\n", i);
  
  if(i>143 && i<252) return 1;
  if (i==255) return 1;
  return 0;
}
]]></embedded_functions>

<!-- Property 62: Non standard IP type of service value -->
<!--              according to: 
					https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="62" type_property="EVASION" 
    description="Non standard IP protocol number">
      <event value="COMPUTE" event_id="1" 
             description="IP packet with non-standard IP protocol ID (unassigned yet or reserved for extra)"
             boolean_expression="(#em_check_ip_proto_id(ip.proto_id) == 1)"/>
      <event value="COMPUTE" event_id="2" 
             description="Print source and destination of IP"
             boolean_expression="(ip.src != ip.dst)"/>
</property>
</beginning>


### Example 4:
**Description:** Probable TCP NULL scan (4 different attempts in a row on different ports).
**Protocol(s):** tcp, ip
**XML Property:**
<beginning>
<!-- Property 42: Probable TCP NULL scan (4 different attempts in a row on different ports).
-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="42" type_property="ATTACK" 
    description="Probable TCP NULL scan (4 different attempts in a row on different ports).">
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
             description="TCP packet with flags 0 (1)"
             boolean_expression="(tcp.flags == 0)"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP packet with flags 0 (2)"
             boolean_expression="((tcp.flags == 0)&amp;&amp;((tcp.dest_port != tcp.dest_port.1)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="TCP packet with flags 0 (3)"
             boolean_expression="((tcp.flags == 0)&amp;&amp;((tcp.dest_port != tcp.dest_port.1)&amp;&amp;((tcp.dest_port != tcp.dest_port.2)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
      <event value="COMPUTE" event_id="4"
             description="TCP packet with flags 0 (4)"
             boolean_expression="((tcp.flags == 0)&amp;&amp;((tcp.dest_port != tcp.dest_port.1)&amp;&amp;((tcp.dest_port != tcp.dest_port.2)&amp;&amp;((tcp.dest_port != tcp.dest_port.3)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
    </operator>
</property>
</beginning>


### Example 5:
**Description:** Bogus IP version
**Protocol(s):** ip
**XML Property:**
<beginning>
<!-- Property 59: Bogus IP version.
-->
	<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="59" type_property="EVASION" 
    description="Bogus IP version (different from 4 and 6)">
      <event value="COMPUTE" event_id="1" 
             description="IP version different from 4 and 6"
             boolean_expression="((ip.version != 4)&amp;&amp;(ip.version != 6))"/>
      <event value="COMPUTE" event_id="2" 
             description="True"
             boolean_expression="(1==1)"/>
</property>
</beginning>


### Example 6:
**Description:** Non standard IP option number
**Protocol(s):** ip
**XML Property:**
<beginning>
<embedded_functions><![CDATA[
//each function name should be prefixed by em_

static inline int em_check_ip_opt(int i){
  //printf("IP option number:%d\n", i);
  switch (i) {
    case 0:
    case 1:
    case 130:
    case 131:
    case 68:
    case 133:
    case 134:
    case 7:
    case 136:
    case 137:
    case 10:
    case 11:
    case 12:
    case 205:
    case 142:
    case 15:
    case 144:
    case 145:
    case 82:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 25:
    case 30:
    case 94:
    case 158:
    case 222:
      return 0;
    default:
  		return 1;    
  }
}
]]></embedded_functions>

<!-- Property 60: Non standard IP option number -->
<!--              according to: 
                       https://www.iana.org/assignments/ip-parameters/ip-parameters.xhtml
-->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="60" type_property="EVASION" 
    description="Non standard IP option number">
      <event value="COMPUTE" event_id="1" 
             description="IP packet with non-standard IP option number."
             boolean_expression="(#em_check_ip_opt(ip.opts_type) == 1)"/>
      <event value="COMPUTE" event_id="2" 
             description="Print source and destination of IP"
             boolean_expression="(ip.src != ip.dst)"/>
</property>
</beginning>


### Example 7:
**Description:** Ensure INT is valid
**Protocol(s):** int
**XML Property:**
<beginning>
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="78" type_property="TEST" 
    description="Ensure INT is valid">
      <event value="COMPUTE" event_id="1" 
             description="Having INT"
             boolean_expression="( int.packet_count > 0 )"/>
      <event value="COMPUTE" event_id="2" 
             description="INT Data"
             boolean_expression="(int.hop_switch_ids != '')"/>
</property>
</beginning>

### Task:
Generate a new XML property that matches the scenario and adheres to the protocol(s) context.

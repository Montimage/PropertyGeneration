
You are an AI that generates XML properties for deep packet inspection.

### MMT Property Context:
XML Rules:
- A <property> defines a security rule (SECURITY_RULE) or an attack rule (ATTACK).
- Each property begins with a <property> tag and ends with </property>
- A property is a "general ordered tree"
- The nodes of the property tree are:
  - <property> node (required)
  - <operator> nodes (optional)
  - <event> nodes (required)
- The <property> node is forcibly the root node and the <event> nodes are forcibly leaf nodes.
- The left branch represents the context and the right branch represents the trigger.
- The property is found valid when the trigger is found valid; and the trigger is checked only if the context is valid.

- <beginning> tag:
  - Container tag for defining multiple properties
  - Holds one or more <property> definitions
  - Includes optional embedded functions.

- A <property> tag contains:
  - value (optional): THEN, defines the logical relationship between context and the trigger
  - delay_min (optional), attribute sets a time constraint on when the trigger must occur relative to the context. A negative delay (-1) means the trigger must have occurred before the context. A zero delay (0) means the trigger must occur simultaneously with the context. A positive delay (+N) means the trigger must occur after the context.
  - property_id (required): attribute uniquely identifies the property.
  - description (required): Textual description of the property.
  - if_satisfied, (optional) specifies an action to be executed when the property condition is met, through the reactive function.
  - type_property (required) can be SECURITY_RULE, ATTACK, EVASION, or TEST

- An <event> tag contains:
  - value:COMPUTE, indicates that this event is evaluated based on a boolean expression.
  - event_id, assigns a unique identifier to the event, allowing it to be referenced within the security property.
  - description: Textual description of the event.
  - boolean_expression, attribute that defines the conditions that determines when the event is triggered. Packet or message attributes are identified by <protocol_name>”.”<field_name>[“.”<event_id>]. Protocol_name is either BASE (containing packet metadata, e.g., protocol id, time slot of message) or the message/protocol identifier (e.g., SPHY_DATA_REQ, IP, TCP, UDP...). Field_name is the name of the attribute. Event_id allows identifying data captured when another event (identified using its id) of the property occurred. Expressions can use packet fields, protocol attributes, or embedded functions.

- <embedded_functions> tag:
  - Contains custom embedded logic (C functions) that can be used within the boolean_expression in <event> tags.
  - One can either use existing embedded functions or implement a new function.
  - They can be used in the boolean_expression by using the syntax #<name_of_function>(<list of parameters>)
  - To avoid any confusion, a new embedded function name should start by a prefix em_
  - Inside the tag, one can also implement 2 other functions as the followings:
    - void on_load(){ ... } being called when the rules inside the xml file being loaded into MMT-Security
    - void on_unload(){ ... } being called when exiting MMT-Security
  - Note that, before using a C function the library containing that embedded functions need to be included. The following libraries have been pre-included:
    -#include <string.h>
    -#include <stdio.h>
    -#include <stdlib.h>
    -#include "mmt_lib.h"
    -#include "pre_embedded_functions.h"

- Reactive functions
  - They allow user perform some action when a rule is satisfied. The functions will be called each time rules are satisfied.
  - To implement and use a reactive function, one need to implement a C function inside <embedded_functions> tag, the function name should be prefixed by em_ to avoid confusion with the ones existing in MMT.
  - The function has the following format:
typedef void (*mmt_rule_satisfied_callback)(
		const rule_t *rule,		          //rule being validated
		int verdict,                     //DETECTED, NOT_RESPECTED
		uint64_t timestamp,              //moment (by time) the rule is validated
		uint64_t counter,                //moment (by order of message) the rule is validated
		const mmt_array_t * const trace  //historic of messages that validates the rule
);

- In the XML file of a rule, if an attribute is absent then its value is set by default
  - property, operator:
    - value: COMPUTE (=> only one <event> is required. Thus delay_min and delay_max must be 0)
    - delay_units: 0
    - delay_max: 0

## Scenario Description:
The system under test consists of an electric vehicle charging station (evcs) that communicates
with a central station management system (csms) using the open charge point protocol (ocpp).
The charging station must correctly handle session initialization requests, send the appropriate ocpp
messages, and respond to network failures according to protocol specifications.
The generated XML should define expected message exchanges, time constraints, and error recovery
mechanisms for ensuring compliance with ocpp-based communication, and message structure.

Protocol: Open Charge Point Protocol (ocpp) 1.6
Property: The charging station must initiate a charging session when it receives a valid charging request from a vehicle.

Trigger: The charging station sends a BootNotification message to the Central System (CSMS) as defined in the OCPP protocol.
- The BootNotification message contains metadata about the charging station, such as model, vendor, and firmware version.
- The CSMS must process this message and determine if the station is authorized to initiate a session.

Response:
- The CSMS must respond with a BootNotificationResponse, including a status field (Accepted, Pending, or Rejected).
- If the status is Accepted, the CSMS must send an Authorization request within 2 seconds to confirm the charging session start.

Error Handling:
- If the CSMS does not respond within 2 seconds, the charging station must retry sending the BootNotification message up to 3 times.
- If the station does not receive a valid response after 3 retries, it must raise an alert event indicating a failed connection.
- The alert must be logged and reported to the network monitoring system.

## Protocol Context:
Protocol: ocpp
Attributes: ['message', 'type', 'id', 'action', 'payload']

## Example XML Properties:
### Example 1:
**Description:** The field Options must be homogeneous in every IP fragments
**Protocol(s):** ip
**XML Property:**
<beginning>
<!-- Property 8: The field Options must be homogeneous in every IP fragments
-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="100" property_id="8" type_property="EVASION" 
    description="The IP options field must be homogeneous in all IP fragments.">
    <event value="COMPUTE" event_id="1" 
           description="IP segment"
           boolean_expression="(ip.ip_frag_packets_count &gt; 0)"/>
    <event value="COMPUTE" event_id="2" 
           description="Other IP segment with different ip.options"
           boolean_expression="((ip.ip_frag_packets_count == ip.ip_frag_packets_count.1 +1)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;((ip.dst == ip.dst.1)&amp;&amp;(ip.opts_type != ip.opts_type.1))))"/>
</property>
</beginning>


### Example 2:
**Description:** Ensure DTLS traffic is using v1.2 and strong ciphersuite which is set via MMT_SEC_DTLS_CIPHER_ALLOWLIST environment variable which contains a comma-separated list of cipher numbers.
**Protocol(s):** dtls, ip
**XML Property:**
<beginning>

<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="79" type_property="SECURITY" 
    description="Ensure DTLS traffic is using v1.2 and strong ciphersuite which is set via 
    MMT_SEC_DTLS_CIPHER_ALLOWLIST environment variable which contains a comma-separated list of cipher numbers.
    Example MMT_SEC_DTLS_CIPHER_ALLOWLIST='0xc0a4,0xc0a5' will allow TLS_PSK_WITH_AES_128_CCM and TLS_PSK_WITH_AES_256_CCM ciphers">
      <event value="COMPUTE" event_id="1" 
             description="DTLS packet"
             boolean_expression="( ( dtls.packet_count > 0 ) &amp;&amp; #em_print(ip.client_addr, ip.server_addr, ip.client_port, ip.server_port))"/>
      <event value="COMPUTE" event_id="2" 
             description="DTLS version and ciphersuites in client hello handshake messages"
             boolean_expression="(( #em_is_strong_version( dtls.version )  
                         &amp;&amp; #em_is_strong_ciphers( dtls.client_hello_cipher_suite ) )"/>
</property>

<embedded_functions><![CDATA[
#include <stdlib.h>
#include <mmt_core.h>
#include <tcpip/mmt_tcpip.h>

static inline bool em_print( const void * data, ...){
	return true;
}

static inline bool em_is_strong_version( double version ){
	return (version == DTLS_VERSION_1_2 ) || (version == DTLS_VERSION_1_3 );
}


static size_t    allow_ciphers_size = 0;
static uint16_t *allow_ciphers_list = NULL;

void on_load(){
	const char *str = getenv("MMT_SEC_DTLS_CIPHER_ALLOWLIST");
	if( str == NULL ){
		mmt_info("Rule 79.dtls_v12_ciphersuites: no value of MMT_SEC_DTLS_CIPHER_ALLOWLIST" );
		return;
	}
	char **str_ciphers = NULL;
	allow_ciphers_size = str_split( str, ',', &str_ciphers );
	if( allow_ciphers_size == 0 )
		return;
	
	allow_ciphers_list = mmt_mem_alloc( sizeof( uint16_t ) * allow_ciphers_size );
	size_t i;
	for( i=0; i<allow_ciphers_size; i++ )
		allow_ciphers_list[i] = strtol( str_ciphers[i], NULL, 0 );
	
	mmt_mem_force_free( str_ciphers );
	
	//print info
	mmt_info("Rule 79.dtls_v12_ciphersuites: allow %zu ciphers", allow_ciphers_size );
	for( i=0; i<allow_ciphers_size; i++ )
		mmt_info("Rule 79.dtls_v12_ciphersuites: %zu: %hu", i, allow_ciphers_list[i] );
}

void on_unload(){
	if( allow_ciphers_list )
		mmt_mem_force_free( allow_ciphers_list );
}

static inline bool em_is_strong_ciphers( const void *data ){
	const mmt_u16_array_t *ciphers = (mmt_u16_array_t *) data;
	size_t i, j;
	for( i=0; i<ciphers->len; i++ ){
		for( j=0; j<allow_ciphers_size; j++ )
			if( allow_ciphers_list[j] == ciphers->data[i] )
				break;
		
		//when we visited all allow_ciphers_list but not found
		if( j >= allow_ciphers_size )
			return false;
	}
	return true;
}
]]></embedded_functions>
</beginning>

### Example 3:
**Description:** Out of order IP fragmentation.
**Protocol(s):** ip
**XML Property:**
<beginning>
<!-- Property 23: Out of order IP fragmentation.-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="23" type_property="EVASION" 
    description="Out of order IP fragmentation : a fragment with a size less than 9 bytes (allowed but could be an evasion).">
      <event value="COMPUTE" event_id="1" 
             description="IP fragment followed by another"
             boolean_expression="((ip.identification &gt; 0)&amp;&amp;((ip.mf_flag == 1)&amp;&amp;((ip.frag_offset &gt;= 0)&amp;&amp;(ip.src != ip.dst))))"/>
      <event value="COMPUTE" event_id="2" 
             description="IP fragment with same identification and an offset less than 9 bytes"
             boolean_expression="((ip.identification == ip.identification.1)&amp;&amp;((ip.frag_offset &lt; ip.frag_offset.1)&amp;&amp;(((ip.frag_offset.1 - ip.frag_offset) &lt; 9)&amp;&amp;(ip.src != ip.dst))))"/>
</property>
</beginning>


### Example 4:
**Description:** Probable TCP ACK/Window scan (4 different attempts in a row on different ports).
**Protocol(s):** tcp, ip
**XML Property:**
<beginning>
<!-- Property 44: Probable TCP ACK/Window scan (4 different attempts in a row on different ports).
-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="44" type_property="ATTACK" 
    description="Probable TCP ACK/Window scan (4 different attempts in a row on different ports).">
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
             description="TCP ACK packet header with a destination port field set (1)"
             boolean_expression="(tcp.flags == 16)"/>
      <event value="COMPUTE" event_id="2" 
             description="TCP ACK packet header with another destination port field set (2)"
             boolean_expression="((tcp.flags == 16)&amp;&amp;((tcp.dest_port != tcp.dest_port.1)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="TCP ACK packet header with another destination port field set (3)"
             boolean_expression="((tcp.flags == 16)&amp;&amp;((tcp.dest_port != tcp.dest_port.1)&amp;&amp;((tcp.dest_port != tcp.dest_port.2)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
      <event value="COMPUTE" event_id="4"
             description="TCP ACK packet header with another destination port field set (4)"
             boolean_expression="((tcp.flags == 16)&amp;&amp;((tcp.dest_port != tcp.dest_port.1)&amp;&amp;((tcp.dest_port != tcp.dest_port.2)&amp;&amp;((tcp.dest_port != tcp.dest_port.3)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
    </operator>
</property>
</beginning>


### Example 5:
**Description:** Non-zero IP padding
**Protocol(s):** ip
**XML Property:**
<beginning>
<!-- Property 64: Non-zero IP padding -->

<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="64" type_property="EVASION" 
    description="Non-zero IP padding">
      <event value="COMPUTE" event_id="1" 
             description="IP packet with non-zero IP padding"
             boolean_expression="(ip.padding_check != 0)"/>
      <event value="COMPUTE" event_id="2" 
             description="Print source and destination of IP"
             boolean_expression="(ip.src != ip.dst)"/>
</property>
</beginning>


### Example 6:
**Description:** Rule checks the dimension of the header length. If it is greater then a threshold an alert is launched
**Protocol(s):** http2, ip
**XML Property:**
<beginning>
<!-- 
Compression attack involve the use of the compression in order to put a great amount of data in a single packet, in order to use a huge amount of 
computational resources by the server after the decompression. In this case the rule checks the length of the packet. 
Since http2 tends to merge multiple packets, an upper limit is also set so as not to confuse the attack with the coalescing operated by the protocol
-->
<embedded_functions><![CDATA[

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "mmt_lib.h"
#include "tcpip/mmt_tcpip_protocols.h"
#include "pre_embedded_functions.h"


static int em_check(
	double header_length,double packet_id){	

	//printf( " Rule 97:Recognized suspect packet. Length %f , packet id %d\n",header_length,(int)packet_id);
	return 0;
}


]]></embedded_functions>

<property value="THEN"  property_id="97" type_property="ATTACK" 
    description="5G Http2 Compression Attack" if_satisfied="">
    <event value="COMPUTE" event_id="1" 
        description="Rule checks the dimension of the header length. If it is greater then a threshold an alert is launched"
        boolean_expression="( ((http2.header_length>350) &amp;&amp; (16384>http2.header_length ) &amp;&amp; ( http2.header_method == 131)) &amp;&amp; ( ip.src != ip.dst ) )"/>

 <event value="COMPUTE" event_id="2" 
        description="Nothing"
        boolean_expression="( http2.header_method != 0)"/>  
</property>
</beginning>


### Example 7:
**Description:** Probable SCTP COOKIE ECHO scan.
**Protocol(s):** sctp, ip
**XML Property:**
<beginning>
<!-- Property 46: Probable SCTP COOKIE ECHO scan.
-->
	<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="46" type_property="ATTACK" 
    description="Probable SCTP COOKIE ECHO scan (4 different attempts in a row on different ports).">
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
             description="SCTP COOKIE ECHO packet header with a destination port field set (1)"
             boolean_expression="(sctp.ch_type == 10)"/>
      <event value="COMPUTE" event_id="2" 
             description="SCTP COOKIE ECHO packet header with another destination port field set (2)"
             boolean_expression="((sctp.ch_type == 10)&amp;&amp;((sctp.dest_port != sctp.dest_port.1)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="SCTP COOKIE ECHO packet header with another destination port field set (3)"
             boolean_expression="((sctp.ch_type == 10)&amp;&amp;((sctp.dest_port != sctp.dest_port.1)&amp;&amp;((sctp.dest_port != sctp.dest_port.2)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
      <event value="COMPUTE" event_id="4"
             description="SCTP COOKIE ECHO packet header with another destination port field set (4)"
             boolean_expression="((sctp.ch_type == 10)&amp;&amp;((sctp.dest_port != sctp.dest_port.1)&amp;&amp;((sctp.dest_port != sctp.dest_port.2)&amp;&amp;((sctp.dest_port != sctp.dest_port.3)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
    </operator>
</property>
</beginning>


### Task:
Generate a new XML property that matches the scenario and adheres to the protocol(s) context.


You are an AI that generates XML properties for deep packet inspection.

### MMT Property Context:
XML Rules:
- A <property> defines a security rule (SECURITY_RULE) or an attack rule (ATTACK).
- Each property begins with a <property> tag and ends with </property>
- A property is a "general ordered tree"
- The nodes of the property tree are:
  - <property> node (required)
  - <operator> nodes (optional)
  - <event> nodes (required)
- The <property> node is forcibly the root node and the <event> nodes are forcibly leaf nodes.
- The left branch represents the context and the right branch represents the trigger.
- The property is found valid when the trigger is found valid; and the trigger is checked only if the context is valid.

- <beginning> tag:
  - Container tag for defining multiple properties
  - Holds one or more <property> definitions
  - Includes optional embedded functions.

- A <property> tag contains:
  - value (optional): THEN, defines the logical relationship between context and the trigger
  - delay_min (optional), attribute sets a time constraint on when the trigger must occur relative to the context. A negative delay (-1) means the trigger must have occurred before the context. A zero delay (0) means the trigger must occur simultaneously with the context. A positive delay (+N) means the trigger must occur after the context.
  - property_id (required): attribute uniquely identifies the property.
  - description (required): Textual description of the property.
  - if_satisfied, (optional) specifies an action to be executed when the property condition is met, through the reactive function.
  - type_property (required) can be SECURITY_RULE, ATTACK, EVASION, or TEST

- An <event> tag contains:
  - value:COMPUTE, indicates that this event is evaluated based on a boolean expression.
  - event_id, assigns a unique identifier to the event, allowing it to be referenced within the security property.
  - description: Textual description of the event.
  - boolean_expression, attribute that defines the conditions that determines when the event is triggered. Packet or message attributes are identified by <protocol_name>”.”<field_name>[“.”<event_id>]. Protocol_name is either BASE (containing packet metadata, e.g., protocol id, time slot of message) or the message/protocol identifier (e.g., SPHY_DATA_REQ, IP, TCP, UDP...). Field_name is the name of the attribute. Event_id allows identifying data captured when another event (identified using its id) of the property occurred. Expressions can use packet fields, protocol attributes, or embedded functions.

- <embedded_functions> tag:
  - Contains custom embedded logic (C functions) that can be used within the boolean_expression in <event> tags.
  - One can either use existing embedded functions or implement a new function.
  - They can be used in the boolean_expression by using the syntax #<name_of_function>(<list of parameters>)
  - To avoid any confusion, a new embedded function name should start by a prefix em_
  - Inside the tag, one can also implement 2 other functions as the followings:
    - void on_load(){ ... } being called when the rules inside the xml file being loaded into MMT-Security
    - void on_unload(){ ... } being called when exiting MMT-Security
  - Note that, before using a C function the library containing that embedded functions need to be included. The following libraries have been pre-included:
    -#include <string.h>
    -#include <stdio.h>
    -#include <stdlib.h>
    -#include "mmt_lib.h"
    -#include "pre_embedded_functions.h"

- Reactive functions
  - They allow user perform some action when a rule is satisfied. The functions will be called each time rules are satisfied.
  - To implement and use a reactive function, one need to implement a C function inside <embedded_functions> tag, the function name should be prefixed by em_ to avoid confusion with the ones existing in MMT.
  - The function has the following format:
typedef void (*mmt_rule_satisfied_callback)(
		const rule_t *rule,		          //rule being validated
		int verdict,                     //DETECTED, NOT_RESPECTED
		uint64_t timestamp,              //moment (by time) the rule is validated
		uint64_t counter,                //moment (by order of message) the rule is validated
		const mmt_array_t * const trace  //historic of messages that validates the rule
);

- In the XML file of a rule, if an attribute is absent then its value is set by default
  - property, operator:
    - value: COMPUTE (=> only one <event> is required. Thus delay_min and delay_max must be 0)
    - delay_units: 0
    - delay_max: 0

## Scenario Description:
The system under test consists of an electric vehicle charging station (evcs) that communicates
with a central station management system (csms) using the open charge point protocol (ocpp).
This property ensures that the charging station correctly terminates a charging session when requested 
by the user or vehicle, following the expected message flow and logging procedures.
The generated XML should define expected message exchanges, time constraints, and error recovery
mechanisms for ensuring compliance with ocpp-based communication, and message structure.

Protocol: Open Charge Point Protocol (ocpp) 1.6
Property: The charging station must safely terminate a charging session when requested by the user or the vehicle.

Trigger: The user initiates a stop transaction via:
- The charging point interface (e.g., pressing a stop button).
- The vehicle interface (e.g., stopping charging via the in-vehicle system).

Response:
- The charging station must send a StopTransaction message to the CSMS.
- The CSMS must log the session as completed and store relevant transaction data.

Error Handling:
- If the charging session is not properly terminated within 5 seconds, the system must retry sending the StopTransaction message.
- If retries fail, the system must issue a warning to the user and the operator, indicating a session termination failure.
- The warning must be logged and sent to the network monitoring system for further analysis.

## Protocol Context:
Protocol: ocpp
Attributes: ['message', 'type', 'id', 'action', 'payload']

## Example XML Properties:
### Example 1:
**Description:** Probable TCP idle scan via a zombie.
**Protocol(s):** tcp, ip
**XML Property:**
<beginning>
<!-- Property 47: Probable TCP idle scan via a zombie.  
-->
<property value="THEN" delay_units="ms" delay_min="0+" delay_max="10" property_id="47" type_property="ATTACK" 
    description="Probable TCP idle scan via a zombie.">
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="1" 
             description="The zombie reset the connection with the victim"
             boolean_expression="(tcp.rst == 1)"/>
      <event value="COMPUTE" event_id="2" 
             description="The zombie starts scanning with TCP SYN (1)"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.src_port == tcp.src_port.1)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1))))"/>
    </operator>
    <operator value="THEN" delay_units="ms" delay_min="0+" delay_max="10">
      <event value="COMPUTE" event_id="3" 
             description="The zombie continues scanning with TCP SYN (2)"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.src_port == tcp.src_port.1)&amp;&amp;((tcp.dest_port != tcp.dest_port.2)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
      <event value="COMPUTE" event_id="4"
             description="The zombie continues scanning with TCP SYN (3)"
             boolean_expression="((tcp.flags == 2)&amp;&amp;((tcp.src_port == tcp.src_port.1)&amp;&amp;((tcp.dest_port != tcp.dest_port.2)&amp;&amp;((tcp.dest_port != tcp.dest_port.3)&amp;&amp;((ip.src == ip.src.1)&amp;&amp;(ip.dst == ip.dst.1)))))"/>
    </operator>
</property>
</beginning>


### Example 2:
**Description:** This rule detects whether SCTP packets contain payload other than NGAP.
**Protocol(s):** sctp, sctp_data, ip
**XML Property:**
<beginning>

<!--
This rule detects whether SCTP packets contain payload other than NGAP.

Signature: to check whether "data_ppid" field of SCTP is differed 
  - from 60 which is used to indicate NGAP
  - and from 46 which is used to indicate DIAMETER
  

We check only on SCTP targeted to port 38412
https://www.etsi.org/deliver/etsi_ts/138400_138499/138412/15.00.00_60/ts_138412v150000p.pdf
Section 7. Transport Layer
"The SCTP Destination Port number value assigned by IANA to be used for NGAP is 38412"

To generate attack traffic: 
  https://github.com/Montimage/5Greplay/blob/main/rules/11.modify-sctp-params.xml
  
Note: 
 - the condition (ip.src != ip.dst) is used just to collect the IP addresses to show on MMT-Operator 
 -->

<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="92" type_property="ATTACK" 
    description="NGAP packet with wrong SCTP Protocol Identifier">
    <event value="COMPUTE" event_id="1" 
        description="SCTP payload is existing"
           boolean_expression="((sctp.packet_count != 0) &amp;&amp; ((sctp.dest_port == 38412) &amp;&amp; (ip.src != ip.dst) ))"/>
           
   <event value="COMPUTE" event_id="2" 
      description="SCTP Protocol Identifier different from NGAP (60) or DIAMETER (46)"
         boolean_expression="((sctp_data.data_ppid != 60) &amp;&amp; (sctp_data.data_ppid != 46))"/>
  
</property>
</beginning>




### Example 3:
**Description:** Bogus IP version
**Protocol(s):** ip
**XML Property:**
<beginning>
<!-- Property 59: Bogus IP version.
-->
	<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="59" type_property="EVASION" 
    description="Bogus IP version (different from 4 and 6)">
      <event value="COMPUTE" event_id="1" 
             description="IP version different from 4 and 6"
             boolean_expression="((ip.version != 4)&amp;&amp;(ip.version != 6))"/>
      <event value="COMPUTE" event_id="2" 
             description="True"
             boolean_expression="(1==1)"/>
</property>
</beginning>


### Example 4:
**Description:** This rule detects whether 5G traffic in control plane: one UE must not send two consecutive InitialUEMessage during 0.1 millisecond
**Protocol(s):** ngap, sctp, ip
**XML Property:**
<beginning>

<!--
This rule detects whether 5G traffic in control plane: one UE must not send two consecutive InitialUEMessage during 0.1 millisecond

Note: in the boolean_expression below, we use: 
- ngap.procedure_code == 15: indicate InitialUEMessage
- sctp.dest_port == 38412  : focus on control plane (?)
- ip.src != ip.dst         : this is mainly to print IP src and dest to alert reports
- ngap.ran_ue_id == ngap.ran_ue_id.1: the two events have the same ngap.ran_ue_id
-->

<property value="THEN" delay_units="mms" delay_min="0" delay_max="100" property_id="94" type_property="ATTACK" 
    description="5G DoS attack in the control plane: two consecutive InitialUEMessage from a single UE during 0.1 millisecond">
    <event value="COMPUTE" event_id="1" 
        description="NGAP InitialUEMessage"
           boolean_expression="(( ngap.procedure_code == 15) &amp;&amp; ((sctp.dest_port == 38412) &amp;&amp;( ip.src != ip.dst )) )"/>

   <event value="COMPUTE" event_id="2" 
        description="Another NGAP InitialUEMessage"
           boolean_expression="(( ngap.procedure_code == 15) &amp;&amp; ((sctp.dest_port == 38412) &amp;&amp;( ngap.ran_ue_id == ngap.ran_ue_id.1 )) )"/>
</property>
</beginning>

### Example 5:
**Description:** Protocol hierarchy length is 16
**Protocol(s):** ip
**XML Property:**
<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- MMT_Security Copyright (C) 2014-->
<beginning>
<embedded_functions><![CDATA[
#include <mmt_core.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>

//each function name should be prefixed by em_
/**
* Return:
* - 0: ok
* - 1: invalid
* - 2: NULL
*/
static inline int em_check_max_proto_len(const void *data){
    proto_hierarchy_t * p = (proto_hierarchy_t *) data;
    if (p->len >14) return 1; 
   return 0;
}
]]></embedded_functions>
<!-- Property 73: Protocol hierarchy length is 16 -->
<property value="THEN" delay_units="ms" delay_min="0" delay_max="0" property_id="73" type_property="ATTACK" 
     description="The maximum protocol hierarchy length exceeded" >
   <event event_id="1" value="COMPUTE" 
           description="Print out IP addresses"
           boolean_expression="(ip.src != ip.dst)"/>
   <event event_id="2" value="COMPUTE" 
           description="Maximum protocol hierarchy length exceeded"
           boolean_expression="(#em_check_max_proto_len(meta.proto_hierarchy)==1)"/>
 </property>
</beginning>


### Task:
Generate a new XML property that matches the scenario and adheres to the protocol(s) context.
